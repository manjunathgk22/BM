/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * graphtype.java
 *
 * Created on Apr 9, 2010, 8:49:23 PM
 */

package frontend;
import java.applet.*;
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import javax.swing.*;
import java.sql.*;
/**
 *
 * @author kk
 */
public class graphtype extends javax.swing.JFrame {

    /** Creates new form graphtype */
    public graphtype() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        graph1 = new javax.swing.JButton();
        graph2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        graph3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14));
        jLabel2.setForeground(new java.awt.Color(204, 0, 153));
        jLabel2.setText("Click on the button to view.");

        graph1.setFont(new java.awt.Font("Times New Roman", 1, 12));
        graph1.setText("UPLOAD RATE");
        graph1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graph1ActionPerformed(evt);
            }
        });

        graph2.setFont(new java.awt.Font("Times New Roman", 1, 12));
        graph2.setText("DOWNLOAD RATE");
        graph2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graph2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 12));
        jButton3.setText("<<BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        graph3.setFont(new java.awt.Font("Times New Roman", 1, 12));
        graph3.setText("TOTAL RATE");
        graph3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graph3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(graph1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(graph2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(graph3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel2)))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addComponent(graph1)
                .addGap(56, 56, 56)
                .addComponent(graph2)
                .addGap(50, 50, 50)
                .addComponent(graph3)
                .addGap(63, 63, 63)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new graph().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void graph1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graph1ActionPerformed
        // TODO add your handling code here:
         int j=0,k=0;
        final float data[];
         data=new float[100];
    Connection con = null;
    String url = "jdbc:mysql://localhost:3306/";
    String db = "traffic_report";
    String driver = "com.mysql.jdbc.Driver";
    String user = "root";
    String pass = "root";
    try{
      Class.forName(driver).newInstance();
      con = DriverManager.getConnection(url+db, user, pass);
      try{
        Statement st = con.createStatement();
        ResultSet res = st.executeQuery("SELECT UploadinMB FROM  current_traffic  ");
        while (res.next()) {
          float i = res.getFloat("UploadinMB");
          data[j++]=i;
         // int s = res.getInt("time");
                  }
        con.close();
      }
      catch (SQLException s){
        System.out.println("SQL code does not execute."+s);
      }
    }
 catch (Exception e){
      e.printStackTrace();
    }
       class GraphingData extends JPanel {

    final int PAD = 20;

    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        // Draw labels.
        Font font = g2.getFont();
        FontRenderContext frc = g2.getFontRenderContext();
        LineMetrics lm = font.getLineMetrics("0", frc);
        float sh = lm.getAscent() + lm.getDescent();
        // Ordinate label.
        String s = "UPLOAD RATE";
        
        float sy = PAD + ((h - 2*PAD) - s.length()*sh)/2 + lm.getAscent();
        for(int i = 0; i < s.length(); i++) {
            String letter = String.valueOf(s.charAt(i));
            float sw = (float)font.getStringBounds(letter, frc).getWidth();
            float sx = (PAD - sw)/2;
            g2.drawString(letter, sx, sy);
            sy += sh;
            
        }
        g2.setPaint(Color.green.darker());
        String s1="10    ";
         String s2="20    ";
         String s3="30";
         String s4="40";
         String s5="50";
         String s6="60";
         String s7="70";
         String s8="80";
         String s9="90";
         String s10="100";
         String s0="00";
         g2.drawString(s0, 0,340 );
             g2.drawString(s10,0,50);
              g2.drawString(s9,0,70);
              g2.drawString(s8,0,100);
              g2.drawString(s7,0,130);
              g2.drawString(s6,0,160);
              g2.drawString(s5,0,190);
              g2.drawString(s4,0,220);
              g2.drawString(s3,0,250);
              g2.drawString(s2,0,280);
              g2.drawString(s1,0,310);
        
        // Abcissa label.
               g2.setPaint(Color.black.darker());
        s = "TIME(in seconds)";
        String pk="10   20   30    40   50   60     70   80     90      100        110      120 ";
        sy = h - PAD + (PAD - sh)/2 + lm.getAscent();
        float sw = (float)font.getStringBounds(s, frc).getWidth();
        float sx = (w - sw)/2;
        g2.drawString(s, sx, sy);
        // Draw lines.
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        g2.setPaint(Color.green.darker());
        for(int i = 0; i < data.length-1; i++) {
            double x1 = PAD + i*xInc;
            double y1 = h - PAD - scale*data[i];
            double x2 = PAD + (i+1)*xInc;
            double y2 = h - PAD - scale*data[i+1];
            g2.draw(new Line2D.Double(x1, y1, x2, y2));

            g2.drawString(pk, 20,h+1);
        }
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
    }

    private float getMax() {
        float max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
    }
    JFrame f = new JFrame();
       // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }//GEN-LAST:event_graph1ActionPerformed

    private void graph2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graph2ActionPerformed
 int j=0,k=0;
        final float data[];
         data=new float[100];

          Connection con = null;
    String url = "jdbc:mysql://localhost:3306/";
    String db = "traffic_report";
    String driver = "com.mysql.jdbc.Driver";
    String user = "root";
    String pass = "root";
    try{
      Class.forName(driver).newInstance();
      con = DriverManager.getConnection(url+db, user, pass);
      try{
        Statement st = con.createStatement();
        ResultSet res = st.executeQuery("SELECT DownloadinMB FROM  current_traffic  ");
        //data=new float[i];
        while (res.next()) {
          float i = res.getFloat("DownloadinMB");

          data[j++]=i;
         // int s = res.getInt("time");
                  }
        con.close();
      }
      catch (SQLException s){
        System.out.println("SQL code does not execute."+s);
      }
    }
 catch (Exception e){
      e.printStackTrace();
    }
       class GraphingData extends JPanel {

    final int PAD = 20;

    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
       
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
                
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        // Draw labels.

        Font font = g2.getFont();
        FontRenderContext frc = g2.getFontRenderContext();
        LineMetrics lm = font.getLineMetrics("0", frc);
        float sh = lm.getAscent() + lm.getDescent();
        // Ordinate label.
        String s = "DOWNLOAD RATE";
        float sy = PAD + ((h - 2*PAD) - s.length()*sh)/2 + lm.getAscent();
        for(int i = 0; i < s.length(); i++) {
            String letter = String.valueOf(s.charAt(i));
            float sw = (float)font.getStringBounds(letter, frc).getWidth();
            float sx = (PAD - sw)/2;
            g2.drawString(letter, sx, sy);
            sy += sh;
        }
        g2.setPaint(Color.green.darker());
        {
            String s1="10";
         String s2="20";
         String s3="30";
         String s4="40";
         String s5="50";
         String s6="60";
         String s7="70";
         String s8="80";
         String s9="90";
         String s10="100";
         String s0="00";
         g2.drawString(s0, 2,340 );
             g2.drawString(s10,2,50);
              g2.drawString(s9,2,70);
              g2.drawString(s8,2,100);
              g2.drawString(s7,2,130);
              g2.drawString(s6,2,160);
              g2.drawString(s5,2,190);
              g2.drawString(s4,2,220);
              g2.drawString(s3,2,250);
              g2.drawString(s2,2,280);
              g2.drawString(s1,2,310);
    }
        // Abcissa label.
        g2.setPaint(Color.black.darker());
        s = "TIME(in seconds)";
            String pk="10   20   30    40   50   60     70   80     90      100        110      120 ";
        sy = h - PAD + (PAD - sh)/2 + lm.getAscent();
        float sw = (float)font.getStringBounds(s, frc).getWidth();
        float sx = (w - sw)/2;
        g2.drawString(s, sx, sy);
        // Draw lines.
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        g2.setPaint(Color.green.darker());
        for(int i = 0; i < data.length-1; i++) {
            double x1 = PAD + i*xInc;
            double y1 = h - PAD - scale*data[i];
            double x2 = PAD + (i+1)*xInc;
            double y2 = h - PAD - scale*data[i+1];
            g2.draw(new Line2D.Double(x1, y1, x2, y2));
            g2.drawString(pk, 20,h);
          // g2.drawString(pk,10,h);
        }
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4,4));
        }
   
    }

    private float getMax() {
        float max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
    }
    JFrame f = new JFrame();
      // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);

      // TODO add your handling code here:
    }//GEN-LAST:event_graph2ActionPerformed

    private void graph3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graph3ActionPerformed
 int j=0,k=0;
        final float data[];
         data=new float[100];
    Connection con = null;
    String url = "jdbc:mysql://localhost:3306/";
    String db = "traffic_report";
    String driver = "com.mysql.jdbc.Driver";
    String user = "root";
    String pass = "root";
    try{
      Class.forName(driver).newInstance();
      con = DriverManager.getConnection(url+db, user, pass);
      try{
        Statement st = con.createStatement();
        ResultSet res = st.executeQuery("SELECT UploadinMB+DownloadinMB FROM  current_traffic  ");
        //data=new float[i];
        while (res.next()) {
          float i = res.getFloat("UploadinMB+DownloadinMB");

          data[j++]=i;
         // int s = res.getInt("time");
                  }
        con.close();
      }
      catch (SQLException s){
        System.out.println("SQL code does not execute."+s);
      }
    }
 catch (Exception e){
      e.printStackTrace();
    }
       class GraphingData extends JPanel {

    final int PAD = 20;

    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        // Draw labels.
        Font font = g2.getFont();
        FontRenderContext frc = g2.getFontRenderContext();
        LineMetrics lm = font.getLineMetrics("0", frc);
        float sh = lm.getAscent() + lm.getDescent();
        // Ordinate label.
        String s = "UPLOAD & DOWNLOAD RATE";
        float sy = PAD + ((h - 2*PAD) - s.length()*sh)/2 + lm.getAscent();
        for(int i = 0; i < s.length(); i++) {
            String letter = String.valueOf(s.charAt(i));
            float sw = (float)font.getStringBounds(letter, frc).getWidth();
            float sx = (PAD - sw)/2;
            g2.drawString(letter, sx, sy);
            sy += sh;
        } g2.setPaint(Color.green.darker());
        String s1="10";
         String s2="20";
         String s3="30";
         String s4="40";
         String s5="50";
         String s6="60";
         String s7="70";
         String s8="80";
         String s9="90";
         String s10="100";
         String s0="00";
         g2.drawString(s0, 2,340 );
             g2.drawString(s10,2,50);
              g2.drawString(s9,2,70);
              g2.drawString(s8,2,100);
              g2.drawString(s7,2,130);
              g2.drawString(s6,2,160);
              g2.drawString(s5,2,190);
              g2.drawString(s4,2,220);
              g2.drawString(s3,2,250);
              g2.drawString(s2,2,280);
              g2.drawString(s1,2,310);

        // Abcissa label.
               g2.setPaint(Color.black.darker());
        s = "TIME(in seconds)";
        String pk="10   20   30    40   50   60     70   80     90      100        110      120 ";
        sy = h - PAD + (PAD - sh)/2 + lm.getAscent();
        float sw = (float)font.getStringBounds(s, frc).getWidth();
        float sx = (w - sw)/2;
        g2.drawString(s, sx, sy);
        // Draw lines.
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        g2.setPaint(Color.green.darker());
        for(int i = 0; i < data.length-1; i++) {
            double x1 = PAD + i*xInc;
            double y1 = h - PAD - scale*data[i];
            double x2 = PAD + (i+1)*xInc;
            double y2 = h - PAD - scale*data[i+1];
            g2.draw(new Line2D.Double(x1, y1, x2, y2));
            g2.drawString(pk, 20,h);
        }
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4,4));
        }
    }

    private float getMax() {
        float max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
    }
    JFrame f = new JFrame();
      // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);

      // TODO add your handling code here:
            // TODO add your handling code here:
    }//GEN-LAST:event_graph3ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new graphtype().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton graph1;
    private javax.swing.JButton graph2;
    private javax.swing.JButton graph3;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

}
